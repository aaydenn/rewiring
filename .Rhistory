edge.width = 1,
# edge.color = "grey32",
layout = layout_with_fr(theta.graphs$Blood.ICR),
main = "ICR"
)
dev.off()
png("figures/theta.blood.png", 7, 7, units = "in", res = 320)
par(mfrow=c(3,1), mar = c(1, 1, 1, 1))
plot(
theta.graphs$Blood.AL,
vertex.label.cex = 0,
vertex.label = NA,
vertex.size = eigen_centrality(theta.graphs$Blood.AL)$vector*5,
vertex.color = alpha(colors$Blood.AL,0.85),
vertex.label.color = "black",
vertex.label.dist = 0.5,
edge.width = 1,
# edge.color = "grey32",
layout = layout_with_fr(theta.graphs$Blood.AL),
main = "AL"
)
plot(
theta.graphs$Blood.CCR,
vertex.label.cex = 0,
vertex.label = NA,
vertex.size = eigen_centrality(theta.graphs$Blood.CCR)$vector*5,
vertex.color = alpha(colors$Blood.CCR,0.85),
vertex.label.color = "black",
vertex.label.dist = 0.5,
edge.width = 1,
# edge.color = "grey32",
layout = layout_with_fr(theta.graphs$Blood.CCR),
main = "CCR"
)
plot(
theta.graphs$Blood.ICR,
vertex.label.cex = 0,
vertex.label = NA,
vertex.size = eigen_centrality(theta.graphs$Blood.ICR)$vector*5,
vertex.color = alpha(colors$Blood.ICR,0.85),
vertex.label.color = "black",
vertex.label.dist = 0.5,
edge.width = 1,
# edge.color = "grey32",
layout = layout_with_fr(theta.graphs$Blood.ICR),
main = "ICR"
)
dev.off()
png("figures/theta.blood.png", units = "in", res = 320)
par(mfrow=c(3,1), mar = c(1, 1, 1, 1))
plot(
theta.graphs$Blood.AL,
vertex.label.cex = 0,
vertex.label = NA,
vertex.size = eigen_centrality(theta.graphs$Blood.AL)$vector*5,
vertex.color = alpha(colors$Blood.AL,0.85),
vertex.label.color = "black",
vertex.label.dist = 0.5,
edge.width = 1,
# edge.color = "grey32",
layout = layout_with_fr(theta.graphs$Blood.AL),
main = "AL"
)
dev.off()
png("figures/theta.blood.png", units = "in", res = 320)
dev.off()
dev.off()
png("figures/theta.blood.png", units = "in", res = 320)
go <- read_delim(file = "data/gene_association.mgi.gz",
delim = "\t", comment = "!", na = "",
col_names = c("Database_Designation","MGI_Marker_Accession_ID","Mouse_Marker_Symbol","NOT Designation","GO_Term_ID","MGI_Reference_Accession_ID","GO_Evidence_Code","Inferred_From","Ontology","Mouse_Marker_Name","Mouse_Marker_Synonyms","Mouse_Marker_Type","Taxon","Modification_Date","Assigned_By","Annotation_Extension","Gene_Product")) |>
mutate(Ontology = ifelse(Ontology == "P", "BP",
ifelse(Ontology == "F", "MF", "CC")))
goterm <- read_delim(file = "data/go_terms.mgi",
delim = "\t", col_names = c("Ontology", "GO_Term_ID", "GO_Term")) |>
mutate(Ontology = ifelse(Ontology == "Biological Process", "BP",
ifelse(Ontology == "Molecular Function", "MF", "CC")))
GO <- go |>
left_join(goterm, by = c("GO_Term_ID", "Ontology"))
rm(go, goterm)
hub.targets <- lapply(delta.centrality, function(x)
targets.unique |>
filter(mirna %in% (x[x$hub == 1,]$miRNA)))
hub.count <- lapply(hub.targets, function(x)
x |>
count(symbol) |>
arrange(desc(n)) |>
dplyr::filter(n > 2))
hub.go <- lapply(hub.count, function(x)
GO |>
dplyr::filter(Mouse_Marker_Symbol %in% x$symbol) |>
dplyr::select(Mouse_Marker_Symbol, GO_Term_ID, GO_Term, Ontology) |>
distinct() |>
filter(Ontology == "BP"))
go.count <-
lapply(hub.go, function(x)
x |> count(GO_Term_ID) |>
filter(n > 1))
mychord <- function(tab) {
circos.par(gap.degree = 1, cell.padding = c(0, 0, 0, 0))
chordDiagram(
tab,
annotationTrack = "grid",
transparency = 0.75,
# link.lwd = 2,
# link.border = "gray",
link.zindex = rank(tab),
preAllocateTracks = list(track.height = 0.2)
)
circos.track(
track.index = 1,
panel.fun = function(x, y) {
circos.text(
CELL_META$xcenter,
CELL_META$ylim[1],
CELL_META$sector.index,
facing = "clockwise",
niceFacing = TRUE,
adj = c(0, 0.5)
)
},
bg.border = NA
)
circos.clear()
}
go.table <-
lapply(setNames(names(hub.go), names(hub.go)), function(x)
hub.go[[x]] |>
filter(GO_Term_ID %in% go.count[[x]]$GO_Term_ID) |>
with(table(GO_Term_ID, Mouse_Marker_Symbol)))
mychord(go.table$D.Blood.CCR.AL)
mychord <- function(tab) {
circlize::circos.par(gap.degree = 1, cell.padding = c(0, 0, 0, 0))
circlize::chordDiagram(
tab,
annotationTrack = "grid",
transparency = 0.75,
# link.lwd = 2,
# link.border = "gray",
link.zindex = rank(tab),
preAllocateTracks = list(track.height = 0.2)
)
circlize::circos.track(
track.index = 1,
panel.fun = function(x, y) {
circos.text(
CELL_META$xcenter,
CELL_META$ylim[1],
CELL_META$sector.index,
facing = "clockwise",
niceFacing = TRUE,
adj = c(0, 0.5)
)
},
bg.border = NA
)
circlize::circos.clear()
}
go.table <-
lapply(setNames(names(hub.go), names(hub.go)), function(x)
hub.go[[x]] |>
filter(GO_Term_ID %in% go.count[[x]]$GO_Term_ID) |>
with(table(GO_Term_ID, Mouse_Marker_Symbol)))
mychord(go.table$D.Blood.CCR.AL)
mychord <- function(tab) {
circlize::circos.par(gap.degree = 1, cell.padding = c(0, 0, 0, 0))
circlize::chordDiagram(
tab,
annotationTrack = "grid",
transparency = 0.75,
# link.lwd = 2,
# link.border = "gray",
link.zindex = rank(tab),
preAllocateTracks = list(track.height = 0.2)
)
circlize::circos.track(
track.index = 1,
panel.fun = function(x, y) {
circlize::circos.text(
CELL_META$xcenter,
CELL_META$ylim[1],
CELL_META$sector.index,
facing = "clockwise",
niceFacing = TRUE,
adj = c(0, 0.5)
)
},
bg.border = NA
)
circlize::circos.clear()
}
go.table <-
lapply(setNames(names(hub.go), names(hub.go)), function(x)
hub.go[[x]] |>
filter(GO_Term_ID %in% go.count[[x]]$GO_Term_ID) |>
with(table(GO_Term_ID, Mouse_Marker_Symbol)))
mychord(go.table$D.Blood.CCR.AL)
library(circlize)
mychord <- function(tab) {
circos.par(gap.degree = 1, cell.padding = c(0, 0, 0, 0))
chordDiagram(
tab,
annotationTrack = "grid",
transparency = 0.75,
# link.lwd = 2,
# link.border = "gray",
link.zindex = rank(tab),
preAllocateTracks = list(track.height = 0.2)
)
circos.track(
track.index = 1,
panel.fun = function(x, y) {
circos.text(
CELL_META$xcenter,
CELL_META$ylim[1],
CELL_META$sector.index,
facing = "clockwise",
niceFacing = TRUE,
adj = c(0, 0.5)
)
},
bg.border = NA
)
circos.clear()
}
go.table <-
lapply(setNames(names(hub.go), names(hub.go)), function(x)
hub.go[[x]] |>
filter(GO_Term_ID %in% go.count[[x]]$GO_Term_ID) |>
with(table(GO_Term_ID, Mouse_Marker_Symbol)))
mychord(go.table$D.Blood.CCR.AL)
mychord(go.table$D.Blood.ICR.AL)
gc()
theta.topology
delta.topology
topology.table <- function(net) { # function for global topology measures for given network
data.frame(edge = length(E(net)),
node = length(V(net)),
clustering.coef = transitivity(net),
density = edge_density(net))
}
theta.topology <- lapply(theta.graphs, topology.table)
delta.topology <- lapply(delta.graphs, topology.table)
theta.topology
delta.topology
do.call(rbind,theta.topology)
do.call(rbind,theta.topology) |> write_delim(file = "result/theta.topology.tsv")
do.call(rbind,delta.topology) |> write_delim(file = "result/delta.topology.tsv")
theta.centrality
?knn
?transitivity
?edge_density
do.call(rbind,theta.topology)
do.call(rbind,theta.topology) |> rownames_to_column("condition")
do.call(rbind,delta.topology) |> rownames_to_column("condition") |> write_delim(file = "result/delta.topology.tsv")
do.call(rbind,theta.topology) |> rownames_to_column("condition") |> write_delim(file = "result/theta.topology.tsv")
coop::sparsity(theta$Blood.AL)
diffcoex <- function(mat1,mat2,beta=6){
D = sqrt(0.5 * abs(sign(mat1) * mat11^2 - sign(mat2) * mat2^2))^beta
overlap = D %*% D + ncol(D) * D  #topological overlap
mins = matrix(rep(rowSums(D), ncol(D)), nrow = ncol(D))
mins = pmin(mins, matrix(rep(colSums(D), each = ncol(D)), nrow = ncol(D)))
overlap = 1 - (overlap/(mins + 1 - D))
diag(T.ovlap) = 1
return(1 - T.ovlap)
}
tmp <- diffcoex(theta$Blood.AL,theta$Blood.CCR)
diffcoex <- function(mat1,mat2,beta=6){
D = sqrt(0.5 * abs(sign(mat1) * mat1^2 - sign(mat2) * mat2^2))^beta
overlap = D %*% D + ncol(D) * D  #topological overlap
mins = matrix(rep(rowSums(D), ncol(D)), nrow = ncol(D))
mins = pmin(mins, matrix(rep(colSums(D), each = ncol(D)), nrow = ncol(D)))
overlap = 1 - (overlap/(mins + 1 - D))
diag(T.ovlap) = 1
return(1 - T.ovlap)
}
tmp <- diffcoex(theta$Blood.AL,theta$Blood.CCR)
diffcoex <- function(mat1,mat2,beta=6){
D = sqrt(0.5 * abs(sign(mat1) * mat1^2 - sign(mat2) * mat2^2))^beta
overlap = D %*% D + ncol(D) * D  #topological overlap
mins = matrix(rep(rowSums(D), ncol(D)), nrow = ncol(D))
mins = pmin(mins, matrix(rep(colSums(D), each = ncol(D)), nrow = ncol(D)))
overlap = 1 - (overlap/(mins + 1 - D))
diag(T.ovlap) = 1
return(1 - overlap)
}
tmp <- diffcoex(theta$Blood.AL,theta$Blood.CCR)
diffcoex <- function(mat1,mat2,beta=6){
D = sqrt(0.5 * abs(sign(mat1) * mat1^2 - sign(mat2) * mat2^2))^beta
overlap = D %*% D + ncol(D) * D  #topological overlap
mins = matrix(rep(rowSums(D), ncol(D)), nrow = ncol(D))
mins = pmin(mins, matrix(rep(colSums(D), each = ncol(D)), nrow = ncol(D)))
overlap = 1 - (overlap/(mins + 1 - D))
diag(overlap) = 1
return(1 - overlap)
}
tmp <- diffcoex(theta$Blood.AL,theta$Blood.CCR)
tmp
m <- c( "average", "single", "complete", "ward")
names(m) <- c( "average", "single", "complete", "ward")
#function to compute agglomerative coefficient
ac <- function(x) {
agnes(df, method = x)$ac
}
#function to compute agglomerative coefficient
ac <- function(x) {
agnes(tmp, method = x)$ac
}
#calculate agglomerative coefficient for each clustering linkage method
sapply(m, ac)
#function to compute agglomerative coefficient
ac <- function(x) {
cluster::agnes(tmp, method = x)$ac
}
#calculate agglomerative coefficient for each clustering linkage method
sapply(m, ac)
clusGap(tmp, FUN = hcut, nstart = 25, K.max = 10, B = 50)
cluster::clusGap(tmp, FUN = hcut, nstart = 25, K.max = 10, B = 50)
library(cluster)
clusGap(tmp, FUN = hcut, nstart = 25, K.max = 10, B = 50)
clusGap(tmp, FUN = hclust, nstart = 25, K.max = 10, B = 50)
?clusGap
clust <- hclust(tmp, method = "complete")
tmp
is.na(tmp)
is.na(tmp) |> table()
clust <- agnes(tmp, method = "complete")
plot(clust)
clust
clust <- agnes(tmp, method = "complete")
plot(clust)
clust <- agnes(delta$D.Blood.CCR.AL, method = "complete")
plot(clust)
#function to compute agglomerative coefficient
ac <- function(mat,x) {
cluster::agnes(mat, method = x)$ac
}
#calculate agglomerative coefficient for each clustering linkage method
sapply(m, ac, mat = delta$D.Blood.CCR.AL)
clust <- agnes(delta$D.Blood.CCR.AL, method = "ward")
plot(clust)
clusGap(delta$D.Blood.CCR.AL)
silhouette(delta$D.Blood.CCR.AL)
clusGap(delta$D.Blood.CCR.AL, FUNcluster = hclust)
clusGap(delta$D.Blood.CCR.AL, FUNcluster = hclust,K.max = 10)
clusGap(delta$D.Blood.CCR.AL, FUNcluster = pam1, K.max = 10)
clusGap(delta$D.Blood.CCR.AL, FUNcluster = kmeans, K.max = 10)
gap <- clusGap(delta$D.Blood.CCR.AL, FUNcluster = hclust,K.max = 10)
gap <- clusGap(delta$D.Blood.CCR.AL, FUNcluster = kmeans, K.max = 10)
plot(gap)
gap <- clusGap(delta$D.Blood.CCR.AL, FUNcluster = hclust, K.max = 10)
par(mar=(2,2,2,2))
par(mar=c(2,2,2,2))
plot(gap)
gap <- clusGap(delta$D.Blood.CCR.AL, FUNcluster = kmeans, K.max = 10)
clust <- kmeans(delta$D.Blood.CCR.AL, method = "ward")
clust <- kmeans(delta$D.Blood.CCR.AL,centers = 4)
library(factoextra)
install.packages("factoextra")
library(factoextra)
fviz_gap_stat(gap)
plot(
theta.graphs$Blood.AL,
vertex.label.cex = 0,
vertex.label = NA,
vertex.size = eigen_centrality(theta.graphs$Blood.AL)$vector*5,
vertex.color = alpha(colors$Blood.AL,0.85),
vertex.label.color = "black",
vertex.label.dist = 0.5,
edge.width = 1,
# edge.color = "grey32",
layout = layout_with_fr(theta.graphs$Blood.AL),
main = "AL"
)
vertex_attr(theta.graphs$Blood.AL)
ceb <- cluster_edge_betweenness(delta$D.Blood.CCR.AL)
ceb <- cluster_edge_betweenness(delta.graphs$D.Blood.CCR.AL)
dendPlot(ceb, mode="hclust")
ceb <- cluster_louvain(delta.graphs$D.Blood.CCR.AL)
dendPlot(ceb, mode="hclust")
ceb <- cluster_label_prop(delta.graphs$D.Blood.CCR.AL)
ceb
ceb <- cluster_edge_betweenness(delta.graphs$D.Blood.CCR.AL)
ceb
ceb <- cluster_louvain(delta.graphs$D.Blood.CCR.AL)
ceb
ceb <- cluster_louvain(delta.graphs$D.Blood.ICR.AL);ceb
?cluster_louvain
?cluster_leading_eigen
?cluster_leiden
ceb <- cluster_leiden(delta.graphs$D.Blood.CCR.AL) ;ceb
ceb <- cluster_leiden(delta.graphs$D.Blood.CCR.AL, resolution_parameter = 1);ceb
ceb <- cluster_leiden(delta.graphs$D.Blood.CCR.AL, resolution_parameter = 2);ceb
ceb <- cluster_leiden(delta.graphs$D.Blood.CCR.AL, resolution_parameter = 5);ceb
ceb <- cluster_leiden(delta.graphs$D.Blood.CCR.AL, resolution_parameter = 0.1);ceb
ceb <- cluster_leiden(delta.graphs$D.Blood.CCR.AL, resolution_parameter = 0.01);ceb
ceb <- cluster_leiden(delta.graphs$D.Blood.CCR.AL, resolution_parameter = 0.07);ceb
ceb <- cluster_leiden(delta.graphs$D.Blood.CCR.AL, resolution_parameter = 0.06);ceb
ceb <- cluster_leiden(delta.graphs$D.Blood.CCR.AL, resolution_parameter = 0.03);ceb
ceb <- cluster_leiden(delta.graphs$D.Blood.CCR.AL, resolution_parameter = 0.02);ceb
ceb <- cluster_leiden(delta.graphs$D.Blood.CCR.AL, resolution_parameter = 0.01);ceb
ceb <- cluster_leiden(delta.graphs$D.Blood.CCR.AL, resolution_parameter = 0.021);ceb
ceb <- cluster_leiden(delta.graphs$D.Blood.CCR.AL, resolution_parameter = 0.023);ceb
ceb <- cluster_leiden(delta.graphs$D.Blood.ICR.AL, resolution_parameter = 0.02);ceb
membership(ceb)
ceb$nb_clusters
ceb$nb_clusters
ceb$membership
ceb$membership |> table()
ceb <- cluster_louvain(delta.graphs$D.Blood.ICR.AL);ceb
ceb$membership |> table()
ceb <- cluster_louvain(delta.graphs$D.Blood.CCR.AL);ceb
ceb$membership |> table()
plot(
theta.graphs$Blood.AL,
vertex.label.cex = 0,
vertex.label = NA,
vertex.size = eigen_centrality(theta.graphs$Blood.AL)$vector*5,
vertex.color = alpha(colors$Blood.AL,0.85),
vertex.label.color = "black",
vertex.label.dist = 0.5,
edge.width = 1,
# edge.color = "grey32",
layout = layout_with_fr(theta.graphs$Blood.AL),
main = "AL"
)
par(mar = c(1, 1, 1, 1))
plot(
theta.graphs$Blood.AL,
vertex.label.cex = 0,
vertex.label = NA,
vertex.size = eigen_centrality(theta.graphs$Blood.AL)$vector*5,
vertex.color = alpha(colors$Blood.AL,0.85),
vertex.label.color = "black",
vertex.label.dist = 0.5,
edge.width = 1,
# edge.color = "grey32",
layout = layout_with_fr(theta.graphs$Blood.AL),
main = "AL"
)
plot(
theta.graphs$Blood.AL,
vertex.label.cex = 0,
# vertex.label = NA,
vertex.size = eigen_centrality(theta.graphs$Blood.AL)$vector*5,
vertex.color = alpha(colors$Blood.AL,0.85),
vertex.label.color = "black",
vertex.label.dist = 0.5,
edge.width = 1,
# edge.color = "grey32",
layout = layout_with_fr(theta.graphs$Blood.AL),
main = "AL"
)
png("figures/theta.al.blood.png", units = "in", res = 320)
dev.off()
png("figures/theta.al.blood.png", units = "in", res = 320)
svg("figures/theta.al.blood.png", units = "in", res = 320)
plot(
theta.graphs$Blood.AL,
vertex.label.cex = 0,
# vertex.label = NA,
vertex.size = eigen_centrality(theta.graphs$Blood.AL)$vector*5,
vertex.color = alpha(colors$Blood.AL,0.85),
vertex.label.color = "black",
vertex.label.dist = 0.5,
edge.width = 1,
# edge.color = "grey32",
layout = layout_with_fr(theta.graphs$Blood.AL),
main = "AL"
)
dev.off()
svg("figures/theta.al.blood.png")
plot(
theta.graphs$Blood.AL,
vertex.label.cex = 0,
# vertex.label = NA,
vertex.size = eigen_centrality(theta.graphs$Blood.AL)$vector*5,
vertex.color = alpha(colors$Blood.AL,0.85),
vertex.label.color = "black",
vertex.label.dist = 0.5,
edge.width = 1,
# edge.color = "grey32",
layout = layout_with_fr(theta.graphs$Blood.AL),
main = "AL"
)
dev.off()
fossil::rand.index(ceb$1)
fossil::rand.index(ceb$`1`)
ceb$1
ceb[[1]]
fossil::rand.index(ceb[[1]])
fossil::rand.index(ceb[[1]],ceb[[2]])
fossil::jaccard(ceb[[1]],ceb[[2]])
cl <- lapply(delta.graphs, cluster_louvain)
cl
cl$D.Blood.CCR.AL$memberships
cl$D.Blood.CCR.AL$membership
data.frame(mirna=nrow(delta.graphs$D.Blood.CCR.AL),ccr.al=cl$D.Blood.CCR.AL$memberships,icr.al=cl$D.Blood.ICR.AL$memberships,icr.ccr=cl$D.Blood.ICR.CCR$memberships)
cl$D.Blood.CCR.AL$membership
data.frame(mirna=nrow(delta.graphs$D.Blood.CCR.AL),ccr.al=cl$D.Blood.CCR.AL$membership,icr.al=cl$D.Blood.ICR.AL$membership,icr.ccr=cl$D.Blood.ICR.CCR$membership)
data.frame(mirna=rownames(delta.graphs$D.Blood.CCR.AL),ccr.al=cl$D.Blood.CCR.AL$membership,icr.al=cl$D.Blood.ICR.AL$membership,icr.ccr=cl$D.Blood.ICR.CCR$membership)
rownames(delta.graphs$D.Blood.CCR.AL)
data.frame(mirna=rownames(delta$D.Blood.CCR.AL),ccr.al=cl$D.Blood.CCR.AL$membership,icr.al=cl$D.Blood.ICR.AL$membership,icr.ccr=cl$D.Blood.ICR.CCR$membership)
matrix(0, nrow = cl$D.Blood.CCR.AL$vcount, ncol = cl$D.Blood.ICR.AL$vcount)
cl$D.Blood.ICR.AL$vcount
cl$D.Blood.ICR.AL$names
cl$D.Blood.ICR.AL$vcount
cl$D.Blood.ICR.AL$membership
cl$D.Blood.ICR.AL$modularity
cl$D.Blood.ICR.AL$memberships
png("figures/theta.blood.al.png", units = "in", res = 320)
png("theta.blood.al.png", units = "in", res = 320)
